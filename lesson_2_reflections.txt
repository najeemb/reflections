What happens when you initialize a repository? Why do you need to do it?

When you initalize a repo Git begins tracking files as soon you make a 
commit. Initialization adds the metadata necessary to track files. You
need to initialize a repo so that Git sets it up properly for version
control.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

The working directory is where your files reside and thoee are the files
you edit. The staging area holds the files you are ready to commit. The
benefit is that you can remove or add files to the staging area before
you make the commit.

How can you use the staging area to make sure you have one commit per logical
change?

You can use git diff to compare your files in the working directory with the
files in the staging area. From here you can see what files to stage or not
to make a logical commit.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

If you wanted to expierement with something new and didn't want to modify
your existing working code -- you could just branch from from the existing
codebase and keep your experimental changes separate.

How do the diagrams help you visualize the branch structure?

Diagrams help you visualize the branch structure by showing you
the parent of each commit and from which commit new branches
were created.

What is the result of merging two branches together? Why do we represent
it in the diagram the way we do?

When you merge two branches together you create one branch and merge the
final commit of each branch into one commit -- the merge commit. The
previous commits also get merged in the new branch based on timestamp.
The diagram is represented the way it is because the two branches are
completely seperate until merged together.
